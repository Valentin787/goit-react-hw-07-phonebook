{"ast":null,"code":"var _jsxFileName = \"/Users/valentinkuzmich/Desktop/projects Go IT/goit-react-hw-07-phonebook/src/components/ContactForm/ContactForm.jsx\",\n    _s = $RefreshSig$();\n\nimport { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport Input from '../../common/Input';\nimport { nanoid } from 'nanoid';\nimport s from './ContactForm.module.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst ContactForm = _ref => {\n  _s();\n\n  let {\n    confirmContact\n  } = _ref;\n  const [name, setName] = useState('');\n  const [number, setNumber] = useState('');\n\n  const normalizeName = name => name.split(' ').map(word => {\n    const firstUpCaseLetter = word.charAt(0).toUpperCase();\n    const anoterLetter = word.substring(1);\n    return `${firstUpCaseLetter}${anoterLetter}`;\n  }).join(' ');\n\n  const onSubFormData = e => {\n    e.preventDefault();\n    const objData = {\n      id: nanoid(),\n      name: normalizeName(name),\n      number\n    };\n    confirmContact(objData);\n    resetForm();\n  };\n\n  const resetForm = () => {\n    setName('');\n    setNumber('');\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Phonebook\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: onSubFormData,\n      className: s.form,\n      children: [/*#__PURE__*/_jsxDEV(Input, {\n        label: \"Name\",\n        type: \"text\",\n        name: \"name\",\n        onChange: e => setName(e.target.value),\n        value: name,\n        pattern: \"^[a-zA-Z\\u0430-\\u044F\\u0410-\\u042F]+(([' -][a-zA-Z\\u0430-\\u044F\\u0410-\\u042F ])?[a-zA-Z\\u0430-\\u044F\\u0410-\\u042F]*)*$\",\n        title: \"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\",\n        required: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(Input, {\n        label: \"Number\",\n        type: \"tel\",\n        name: \"number\",\n        onChange: e => setNumber(e.target.value),\n        value: number,\n        pattern: \"\\\\+?\\\\d{1,4}?[-.\\\\s]?\\\\(?\\\\d{1,3}?\\\\)?[-.\\\\s]?\\\\d{1,4}[-.\\\\s]?\\\\d{1,4}[-.\\\\s]?\\\\d{1,9}\",\n        title: \"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\",\n        required: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        className: s.btnAdd,\n        children: [' ', \"Add contact\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 7\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Contacts\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n};\n\n_s(ContactForm, \"mgYk2feJE7Nd8w88JvjzPww6GtA=\");\n\n_c = ContactForm;\nContactForm.propTypes = {\n  confirmContact: PropTypes.func // normalizeName: PropTypes.func,\n\n};\nexport default ContactForm;\n\nvar _c;\n\n$RefreshReg$(_c, \"ContactForm\");","map":{"version":3,"names":["useState","PropTypes","Input","nanoid","s","ContactForm","confirmContact","name","setName","number","setNumber","normalizeName","split","map","word","firstUpCaseLetter","charAt","toUpperCase","anoterLetter","substring","join","onSubFormData","e","preventDefault","objData","id","resetForm","form","target","value","btnAdd","propTypes","func"],"sources":["/Users/valentinkuzmich/Desktop/projects Go IT/goit-react-hw-07-phonebook/src/components/ContactForm/ContactForm.jsx"],"sourcesContent":["import { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport Input from '../../common/Input';\nimport { nanoid } from 'nanoid';\nimport s from './ContactForm.module.css';\n\n\n\nconst ContactForm = ({confirmContact}) => {\n\n  const [name, setName] = useState('');\n  const [number, setNumber] = useState('');\n\n  const normalizeName = name => name\n      .split(' ')\n      .map(word => {\n        const firstUpCaseLetter = word.charAt(0).toUpperCase();\n        const anoterLetter = word.substring(1);\n        return `${firstUpCaseLetter}${anoterLetter}`;\n      })\n      .join(' ');\n\n  const onSubFormData = e => {\n    e.preventDefault();\n\n    const objData = {\n      id: nanoid(),\n      name:normalizeName(name),\n      number\n    };\n\n    confirmContact(objData);\n    resetForm();\n\n  };\n  const resetForm = () => {\n    setName('');\n    setNumber('');\n  }\n    \n\n\n  return (\n    <>\n      <h1>Phonebook</h1>\n      <form onSubmit={onSubFormData} className={s.form}>\n      <Input\n        label=\"Name\"\n        type=\"text\"\n        name=\"name\"\n        onChange={(e) => setName(e.target.value)}\n        value={name}\n        pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n        title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n        required\n      />\n\n      <Input\n        label=\"Number\"\n        type=\"tel\"\n        name=\"number\"\n        onChange={(e) => setNumber(e.target.value)}\n        value={number}\n        pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n        title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n        required\n      />\n\n      <button type=\"submit\" className={s.btnAdd}>\n        {' '}\n        Add contact\n      </button>\n      </form>\n      <h2>Contacts</h2>\n    </>\n\n  );\n};\n\nContactForm.propTypes = {\n  confirmContact: PropTypes.func,\n  // normalizeName: PropTypes.func,\n};\n\nexport default ContactForm;\n\n"],"mappings":";;;AAAA,SAASA,QAAT,QAAyB,OAAzB;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,OAAOC,KAAP,MAAkB,oBAAlB;AACA,SAASC,MAAT,QAAuB,QAAvB;AACA,OAAOC,CAAP,MAAc,0BAAd;;;;AAIA,MAAMC,WAAW,GAAG,QAAsB;EAAA;;EAAA,IAArB;IAACC;EAAD,CAAqB;EAExC,MAAM,CAACC,IAAD,EAAOC,OAAP,IAAkBR,QAAQ,CAAC,EAAD,CAAhC;EACA,MAAM,CAACS,MAAD,EAASC,SAAT,IAAsBV,QAAQ,CAAC,EAAD,CAApC;;EAEA,MAAMW,aAAa,GAAGJ,IAAI,IAAIA,IAAI,CAC7BK,KADyB,CACnB,GADmB,EAEzBC,GAFyB,CAErBC,IAAI,IAAI;IACX,MAAMC,iBAAiB,GAAGD,IAAI,CAACE,MAAL,CAAY,CAAZ,EAAeC,WAAf,EAA1B;IACA,MAAMC,YAAY,GAAGJ,IAAI,CAACK,SAAL,CAAe,CAAf,CAArB;IACA,OAAQ,GAAEJ,iBAAkB,GAAEG,YAAa,EAA3C;EACD,CANyB,EAOzBE,IAPyB,CAOpB,GAPoB,CAA9B;;EASA,MAAMC,aAAa,GAAGC,CAAC,IAAI;IACzBA,CAAC,CAACC,cAAF;IAEA,MAAMC,OAAO,GAAG;MACdC,EAAE,EAAEtB,MAAM,EADI;MAEdI,IAAI,EAACI,aAAa,CAACJ,IAAD,CAFJ;MAGdE;IAHc,CAAhB;IAMAH,cAAc,CAACkB,OAAD,CAAd;IACAE,SAAS;EAEV,CAZD;;EAaA,MAAMA,SAAS,GAAG,MAAM;IACtBlB,OAAO,CAAC,EAAD,CAAP;IACAE,SAAS,CAAC,EAAD,CAAT;EACD,CAHD;;EAOA,oBACE;IAAA,wBACE;MAAA;IAAA;MAAA;MAAA;MAAA;IAAA,QADF,eAEE;MAAM,QAAQ,EAAEW,aAAhB;MAA+B,SAAS,EAAEjB,CAAC,CAACuB,IAA5C;MAAA,wBACA,QAAC,KAAD;QACE,KAAK,EAAC,MADR;QAEE,IAAI,EAAC,MAFP;QAGE,IAAI,EAAC,MAHP;QAIE,QAAQ,EAAGL,CAAD,IAAOd,OAAO,CAACc,CAAC,CAACM,MAAF,CAASC,KAAV,CAJ1B;QAKE,KAAK,EAAEtB,IALT;QAME,OAAO,EAAC,wHANV;QAOE,KAAK,EAAC,wIAPR;QAQE,QAAQ;MARV;QAAA;QAAA;QAAA;MAAA,QADA,eAYA,QAAC,KAAD;QACE,KAAK,EAAC,QADR;QAEE,IAAI,EAAC,KAFP;QAGE,IAAI,EAAC,QAHP;QAIE,QAAQ,EAAGe,CAAD,IAAOZ,SAAS,CAACY,CAAC,CAACM,MAAF,CAASC,KAAV,CAJ5B;QAKE,KAAK,EAAEpB,MALT;QAME,OAAO,EAAC,wFANV;QAOE,KAAK,EAAC,8FAPR;QAQE,QAAQ;MARV;QAAA;QAAA;QAAA;MAAA,QAZA,eAuBA;QAAQ,IAAI,EAAC,QAAb;QAAsB,SAAS,EAAEL,CAAC,CAAC0B,MAAnC;QAAA,WACG,GADH;MAAA;QAAA;QAAA;QAAA;MAAA,QAvBA;IAAA;MAAA;MAAA;MAAA;IAAA,QAFF,eA8BE;MAAA;IAAA;MAAA;MAAA;MAAA;IAAA,QA9BF;EAAA,gBADF;AAmCD,CArED;;GAAMzB,W;;KAAAA,W;AAuENA,WAAW,CAAC0B,SAAZ,GAAwB;EACtBzB,cAAc,EAAEL,SAAS,CAAC+B,IADJ,CAEtB;;AAFsB,CAAxB;AAKA,eAAe3B,WAAf"},"metadata":{},"sourceType":"module"}